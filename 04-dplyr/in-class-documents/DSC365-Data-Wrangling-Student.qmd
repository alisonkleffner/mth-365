---
title: "Data Wrangling: dplyr"
author: 'DSC 365: Introduction to Data Science'
date: "September 9, 2025"
format: html
---

## Recommended Reading

-   *Modern Data Science with R* Ch. 4: Data Wrangling on One Table
-   *Modern Data Science with R* Ch. 5: Data Wrangling on Multiple Tables
-   *Modern Data Science with R* Ch. 6: Tidy Data

```{r, message=FALSE, warning=FALSE}
library(tidyverse)
```

------------------------------------------------------------------------

## Example: Gapminder

Gapminder is an independent Swedish foundation with no political, religious or economic affiliations. **Gapminder is a fact tank, not a think tank.** Gapminder fights devastating misconceptions about global development. Gapminder produces free teaching resources making the world understandable based on reliable statistics. Gapminder promotes a fact-based worldview everyone can understand. Gapminder collaborates with universities, UN, public agencies and non-governmental organizations.

```{r}
library(dslabs)
data(gapminder)
glimpse(gapminder)
```

### 1. `select()`:

Picks columns from data frame. Suppose we only want the gdp and region column

```{r}
gapminder %>% 
  select(gdp, region) %>%
  head() #show only first 6 rows

gapminder %>% 
  select(region, gdp) %>%
  head() #show only first 6 rows

gapminder %>% 
  select(-gdp, -region) %>% # all columns but gdp/region
  head() #show only first 6 rows
```

### 2. `filter()`

Selects every element of each row with the indicated filter value

`filter` operations:

-   `<`: less than
-   `<=`: less than or equal to
-   `>`: greater than
-   `>=`: greater than or equal to
-   `==`: equal to
-   `!=`: not equal to
-   `is.na()`: test if NA
-   `!is.na()`: test if not NA
-   `x %in% y`: test if x is in y
-   `!(x %in% y)` : test if x is not in y
-   `x&y`: x and y
-   `x|y`: x or y

Suppose we only want data from the year 2000.

```{r}
gapminder2000 <- gapminder %>%
  filter(year == 2000)

gapminder %>%
  filter(country == "Albania")

```

We can also combine functions!

```{r}
gapminder %>%
  filter(year == 2000) %>%
  select(gdp, region)

gapminder %>%
  select(gdp, region) %>% #doesn't work :(
  filter(year == 2000) 
```

Now, let's take a look at the scatter plot between fertility and infant_mortality for year 2000 only.

```{r, warning=FALSE}
gapminder %>%
  filter(year == 2000) %>%
  ggplot(aes(x = fertility, y = infant_mortality)) +
  geom_point()

gapminder2000 %>% #same thing as above
  ggplot(aes(x = fertility, y = infant_mortality)) +
  geom_point()
  
```

### 3. `mutate()`

-   Change an existing or create a new variable into the data

Example: We'd like to calculate the gross domestic product per capita. 

```{r}
gapminder %>%
  mutate(gdp_pc = gdp/population) %>%
  head()

gapminder = gapminder %>%
  mutate(gdp_pc = gdp/population)
```

### 4. `arrange()`

A way to sort/order your data in ascending or descending order

How do we find out which countries have the high GDP per capital? Right now, the data is sorted by country, then year. We could use the `arrange()` command to resort in terms of another variable.

```{r}
gapminder %>%
  select(country, gdp_pc) %>%
  arrange(gdp_pc) #default: ascending

gapminder %>%
  select(country, gdp_pc) %>%
  arrange(desc(gdp_pc))

gapminder %>%
  select(country, gdp_pc) %>%
  arrange(country, desc(gdp_pc))
```

### 5. `summarize()`

If we want to compare summary statistics, we might use `summarize()`.

```{r}
gapminder %>%
  summarise(avg_gdp = mean(gdp),
            sd_gdp = sd(gdp))
```

Wait, why are these NAs?

```{r}
gapminder %>%
  filter(gdp != "NA") %>%
  summarise(avg_gdp = mean(gdp),
            sd_gdp = sd(gdp))
```

The `summarize()` function sometimes go with `group_by` function. Instead of giving the summary information for the whole data, with a `group_by` function, it provides the summary information by groups.

```{r}
gapminder %>%
  filter(gdp != "NA") %>%
  group_by(continent) %>%
  summarise(avg_gdp = mean(gdp),
            sd_gdp = sd(gdp))
```

### Try it for yourself

(a). Start with the gapminder dataset, filter the data for country United States and Canada, then select fertility, infant mortality and year to be included. Then make a scatterplot of fertility and infant mortality and use color to indicate different years. Note: think about a question, whether the order of filter and select matters?

```{r}

```

(b). Show the summary statistics (mean, sd, min, max) of GDP_pc for year 2010 for different region.

```{r}

```

------------------------------------------------------------------------

## Joining Data

Table joins allow us to combine information stored in different tables, keeping what we need while discarding what we don't

### Simple Data Example

```{r}
df1 <- data.frame(
  id = 1:6, 
  trt = rep(c("A", "B", "C"),
  rep=c(2,1,3)), 
  value = c(5,3,7,1,2,3))

df1
```

```{r}
df2 <- data.frame(
  id=c(4,4,5,5,7,7), 
  stress=rep(c(0,1), 3),
  bpm = c(65,125,74,136,48,110))

df2
```

#### left_join()

All elements in the left data set are kept

Non-matches are filled in by NA

`right_join(`) works symmetric

```{r}
left_join(df1, df2, by="id")
```

#### inner_join()

Only matches from both data sets are kept

```{r}
inner_join(df1, df2, by="id")
```

#### full_join()

All ids are kept, missings are filled in with NA

```{r}
full_join(df1, df2, by="id")
```

## Traps of joins

Sometimes we unexpectedly cannot match values: missing values, different spelling, ...

Be very aware of things like a trailing or leading space

Join can be along multiple variables, e.g. by = c("ID", "Date")

Joining variable(s) can have different names, e.g. by = c("State" = "Name")

Always make sure to check dimensions of data before and after a join

Check on missing values; help with that: anti_join

#### anti_join()

Return all rows from `x` without a match in `y`

```{r}
anti_join(df1, df2, by="id") # no values for id in df2

anti_join(df2, df1, by="id") # no values for id in df1
```

### Example: Linking Data: NYC flights

The R package `nycflights13` contains data about all flights that departed one of the three New York City airports (JFK, LGA, and EWR) in 2013. As you can probably imagine, this isn't a small dataset.

```{r}
#install.packages('nycflights13')
library(nycflights13)
data(flights)

names(flights)
glimpse(flights)
```

Suppose we want to know more about the airline (`carrier`). In the data set, each carrier is stored using a two-letter code.

```{r}
table(flights$carrier)
```

-   Why use a two-letter code instead of the airline name?
-   Can we *link* the airline names to the letter codes?

```{r}
data(airlines)
head(airlines)
```

Use a common variable, called a *key*, to link the data.

### `inner_join()`

```{r}
flights_carrier <- inner_join(flights, airlines, by = "carrier")

```

Did it work?

```{r}
glimpse(flights_carrier)
```

## Your Turn: Departure delays on United

1.  Create a new data set, `flights2` that contains the carrier name, year, month, day, departure delay, arrival delay, origin airport, destination airport, and flight number.

```{r}

```

2.  Filter the data set to only show United Airlines flights. What month in 2013 did United Airlines have the most flights from the New York Area?

```{r}

```

3.  How many unique destinations does United Airlines serve from the New York Area?

```{r}

```

4.  How many unique unique destinations does United Airlines run from each of the three area airports?

```{r}

```

5.  What is the average departure delay of a United Airlines flight leaving any New York area airport?

```{r}

```

6.  What is the average departure delay of a United Airlines flight leaving JFK? LGA? EWR?

```{r}

```
