---
title: "Week 4: Data Wrangling"
format: html
---

## Recommended Reading

- _Modern Data Science with R_ Ch. 4: Data Wrangling
- _Modern Data Science with R_ Ch. 5: Tidy Data and Iteration
- Wickham, Hadley. (2014). "Tidy Data". _Journal of Statistical Software_ 59(10). Available on BlueLine.
- https://srvanderplas.github.io/stat-computing-r-python/part-wrangling/00-wrangling.html

```{r, message=FALSE, warning=FALSE}
library(tidyverse)
```

## Data structure and semantics

- Most statistical datasets are tables made up of *rows* and *columns*. A dataset is a collection of *values*: these can be *numbers* (quantitative) or character *strings* (qualitative)

### What is Data Wrangling?

**Data Wrangling** can be defined as the process of cleaning, organizing, and transforming  raw data into the desired format for analysts to use for prompt decision making. Also known as data cleaning.

### Why do you need this "Data Wrangling" Skill?

- Data wrangling helps to improve data usability as it converts data into a compatible format for the end system.

- It helps to quickly build data flows within an intuitive user interface and easily schedule and automate the data-flow process.

- Integrates various types of information and their sources (like databases, web services, files, etc.)

- Help users to process very large volumes of data easily and easily share data-flow techniques.

### Messy Data

Five main ways tables of data tend not to be tidy:

1. Column headers are values, not variable names.

2. Multiple variables are stored in one column.

3. Variables are stored in both rows and columns.

4. Multiple types of observational units are stored in the same table.

5. A single observational unit is stored in multiple tables.


## Tidy data

"Tidy" data is a standard way of mapping the meaning of a dataset to its structure. 

1. Each variable forms a column.
2. Each observation forms a row.
3. Each type of observational unit forms a table.

Any other arrangement of the data is called "messy".



### dplyr

dplyr is a grammar of data manipulation, providing a consistent set of verbs that help you solve the most common data manipulation challenges

Rules of `dyplr`:

- First argument is always a data frame
- Subsequent arguments say what to do with that data frame
- Always returns a data frame

There are some of the primary dplyr verbs, representing distinct data analysis tasks:

`filter()`: Select specified rows of a data frame, produce subsets

`arrange()`: Reorder the rows of a data frame

`select()`: Select particular columns of a data frame

`mutate()`: Add new or change existing columns of the data frame (as functions of existing columns)

`summarise()`: Create collapsed summaries of a data frame

`group_by`: Introduce structure to a data frame


-------------------------------------------------------------------------

## Example: Gapminder

Gapminder is an independent Swedish foundation with no political, religious or economic affiliations. __Gapminder is a fact tank, not a think tank.__ Gapminder fights devastating misconceptions about global development. Gapminder produces free teaching resources making the world understandable based on reliable statistics. Gapminder promotes a fact-based worldview everyone can understand.  Gapminder collaborates with universities, UN, public agencies and non-governmental organizations.

```{r}
library(dslabs)
data(gapminder)
glimpse(gapminder)
```



### 1. `select()`: 

Picks columns from data frame.

```{r}

```

### 2. `filter()`

Selects every element of each row with the indicated filter value

```{r}

```

Now, let's take a look at the scatter plot between fertility and infant_mortality for year 2000 only. 

```{r, warning=FALSE}

```

### 3. `mutate()`

- Change an existing or create a new variable into the data
- create new variables based on manipulations of the old variables
- Great for calculations

Example: We'd like to calculate the gross domestic product per capita. Here are the variables in our data - write an expression to do this calculation.

```{r}

```


### 4. `arrange()`

A Way to sort/order your data in ascending or descending order

How do we find out which countries have the high GDP per capital? Right now, the data is sorted by country, then year. We could use the `arrange()` command to resort in terms of another variable.

```{r}


```

### 5. `summarize()`

If we want to compare summary statistics, we might use `summarize()`.

```{r}

```


Wait, why are these NAs?

The `summarize()` function sometimes go with group_by function. Instead giving the summary information for the whole data, with a group_by function, it provides the summary information by groups. 

```{r}

```

### Try it for yourself

(a). Start with the gapminder dataset, filter the data for country United States and Canada, then select fertility, infant mortality and year to be included. Then make a scatterplot of fertility and infant mortality and use color to indicate different years. Note: think about a question, whether the order of filter and select matters?

```{r}
  
```



(b). Show the summary statistics (mean, sd, min, max) of GDP_pc for year 2010 for different region.

```{r}

```

---

## Joining Data

Table joins allow us to combine information stored in different tables, keeping what we need while discarding what we don't

### Simple Data Example

```{r}
df1 <- data.frame(
  id = 1:6, 
  trt = rep(c("A", "B", "C"),
  rep=c(2,1,3)), 
  value = c(5,3,7,1,2,3))

df1
```

```{r}
df2 <- data.frame(
  id=c(4,4,5,5,7,7), 
  stress=rep(c(0,1), 3),
  bpm = c(65,125,74,136,48,110))

df2
```


#### left_join()

All elements in the left data set are kept

Mon-matches are filled in by NA

`right_join(`) works symmetric

```{r}

```


#### inner_join()

Only matches from both data sets are kept


```{r}

```


#### full_join()

All ids are kept, missings are filled in with NA

```{r}

```

## Traps of joins

Sometimes we unexpectedly cannot match values: missing values, different spelling, ...

Be very aware of things like a trailing or leading space

Join can be along multiple variables, e.g. by = c("ID", "Date")

Joining variable(s) can have different names, e.g. by = c("State" = "Name")

Always make sure to check dimensions of data before and after a join

Check on missing values; help with that: anti_join


#### anti_join()

Return all rows from `x` without a match in `y`

```{r}



```


### Example: Linking Data: NYC flights

The R package `nycflights13` contains data about all flights that departed one of the three New York City airports (JFK, LGA, and EWR) in 2013. As you can probably imagine, this isn't a small dataset.


```{r}
#install.packages('nycflights13')
library(nycflights13)
data(flights)

names(flights)
glimpse(flights)
```

Suppose we want to know more about the airline (`carrier`). In the data set, each carrier is stored using a two-letter code.

```{r}
```

- Why use a two-letter code instead of the airline name?
- Can we _link_ the airline names to the letter codes?

```{r}

```


Use a common variable, called a _key_, to link the data.

### `inner_join()`

```{r}
```

Did it work?

```{r}

```

## Your Turn: Departure delays on United

1. Create a new data set, `flights2` that contains the carrier name, year, month, day, departure delay, arrival delay, origin airport, destination airport, and flight number.

```{r}
```

2. Filter the data set to only show United Airlines flights. What month in 2013 did United Airlines have the most flights from the New York Area?

```{r}

```

3. How many unique destinations does United Airlines serve from the New York Area?

```{r}

```

4. How many unique unique destinations does United Airlines run from each of the three area airports?
```{r}

```

5. What is the average departure delay of a United Airlines flight leaving any New York area airport?

```{r}

```

6. What is the average departure delay of a United Airlines flight leaving JFK? LGA? EWR?

```{r}

```