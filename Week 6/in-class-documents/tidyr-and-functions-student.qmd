---
title: "DSC365: Introduction to Data Science"
author: "tidyr and Function Writing"
date: "September 24, 2024"
format: pdf
---

```{r echo=FALSE, message=FALSE, warning = FALSE}
library(tidyverse)
library(knitr)
library(RColorBrewer)
```

--------------------------------------------------------------------------------

# tidyr


### Throwback: What is tidy data?

Remember: “Tidy” data is a standard way of mapping the meaning of a data set to its structure.

1. Each variable forms a column.
2. Each observation forms a row.
3. Each type of observational unit forms a table.

Any other arrangement of the data is called “messy”.

Real data sets can, and often do, violate the three principles of tidy data in almost every way imaginable! 

### What Makes Data tidy? Key-Value Pairs


+ Treatment and Patient uniquely describe a single row in the dataset.

+ Treatment and Patient are key variables,

+ Score is a measurement variable

+ This makes Treatment-Patient and Score a key-value pair

Key-Value pairs (KVP) - also attribute-value, field-value, name-value: abstract data representation that allows a lot of flexibility

One way of telling whether a data set is tidy is to check that all keys for a value are aligned in one row


### Example: Untidy Data

```{r, message=FALSE}
library(reshape2)
data("french_fries")
head(french_fries)
```


### This format is not ideal for Data Analysis

```{r, warning=FALSE, fig.height=3, fig.align='center'}
ggplot(french_fries) + 
geom_boxplot(aes(x="1_buttery", y=buttery), fill = "cyan4") +
geom_boxplot(aes(x = "2_grassy", y = grassy), fill = "darkorange2") +
geom_boxplot(aes(x = "3_painty", y = painty), fill = "darkorchid1") +
geom_boxplot(aes(x = "4_potato", y = potato), fill = "chartreuse3") +
geom_boxplot(aes(x = "5_rancid", y = rancid), fill = "deeppink") +
xlab("variable") + ylab("rating")
```

### Tidy your data using pivot_longer

When pivoting longer, you need to specify:

+ the cols (identifiers)
+ the names_to (new column name)
+ the values_to (measures from cols)

```{r, }
#type code
```

### This format is better for Data Analysis

```{r, warning=FALSE, fig.height=3, fig.align='center'}
ggplot(french_fries_long) + 
  geom_boxplot(aes(x = variable, y = rating, fill = variable))
```


### And reverse: `pivot_wider`

Useful if we want to display things as a table

When pivoting wider, you need to specify:

- the names_from (column name that we want to widen)
- the values_from (measures from column we want to widen)

```{r}
#type code
```

Now we are back to your original dataset

--------------------------------------------------------------------------------

# Data Types in R



R is (usually) good at figuring out the best data type, but sometimes we'll need to take corrective action! The five data types we'll interact with the most are:

- Logical: Can take on values of either `TRUE` or `FALSE`
- Double: numeric data with decimals.
- Integer: are numeric data without decimals.
  - When R stores a number in a variable, it converts the number into a “double” value or a decimal type with at least two decimal places.
- Character: The data type character is used when storing text, known as strings in R.
  - The simplest ways to store data under the character format is by using "" around the piece of text
  - Note that everything inside "" will be considered as character, no matter if it looks like character or not.
- Lists

## Lists:

Lists are the R objects which contain elements of different types like − numbers, strings, vectors and another list inside it.


Because of their more complex structure we often want to name the elements of a list (we can also do this with vectors). This can make reading and accessing the list more straight forward.

```{r}
myotherlist = list(A = "hello", 
                   B = 1:4, 
                   C = c(TRUE, FALSE))
```

```{r}
#type code
```



## Coercion

When you mix data types within a vector, R will create the result with the data type that can most easily accommodate all the elements it contains. This conversion between modes of storage is called “coercion”. 

- When R converts the mode of storage based on its content, it is referred to as “implicit coercion”. Can you guess the following data types?

Use the `typeof()` function to find out.

```{r}
typeof(c(1, "Hello"))
typeof(c(FALSE, 3L))
typeof(c(1.2, 3L))
```


## Missing values

R uses `NA` to represent missing values in its data structures.

```{r}
typeof(NA)
```


## Example: Cat lovers

A survey asked respondents their name and number of cats. The instructions said to enter the number of cats as a numerical value.

```{r}
cat_lovers <- read.csv("cat_lovers.csv")
str(cat_lovers)
```

Any concerns with how the data was read in?

Suppose we want to find the average number of cats, so we write the line of code below:

```{r, error=TRUE}
cat_lovers %>% summarize(mean(number_of_cats))
```


How about removing the NA value?

```{r, error=TRUE}
cat_lovers %>%
  summarise(mean_cat = mean(number_of_cats, na.rm = TRUE))
```

Slow down.

What is the type of the `number_of_cats` variable?
  
```{r}
typeof(cat_lovers$number_of_cats)
```

Are there any strange responses in the data?

```{r} 
cat_lovers[48:54,2]
```


**Problem**: `number_of_cats` is a characters, when we want it to be a number. However, we have some strange response.

**Attempt 1**: convert to numeric, where the response that couldn't be converted to a number become `NA`

```{r}
cat_lovers = cat_lovers %>% 
  mutate(number_of_cats_new = as.numeric(number_of_cats))
str(cat_lovers)
```


```{r}
cat_lovers[48:54,4]
cat_lovers %>% 
  summarize(mean(number_of_cats_new, na.rm = TRUE))
```

You can discard these two lines, but they are still useful information, just in different format. This is why surveys restrict entry values...How about we convert them with `case_when()` function. 


**Attempt 2**: define a new variable?

```{r, message=FALSE, warning=FALSE}
cat_lovers2 <- cat_lovers %>%
  mutate(number_of_cats = case_when(
    name == "Ginger Clark" ~ 2,
    name == "Doug Bass"    ~ 3,
    .default = as.numeric(number_of_cats)
    )
  )

head(cat_lovers2, n = 3)

cat_lovers2 %>% summarise(mean_cats = mean(number_of_cats))
```


You may want to save a copy of this new cleaned version of data. This way you can just read in your cleaned data, instead of running all the code each time you want to use that data set.

```{r, eval=FALSE}
write.csv(cat_lovers, file = "cat_lovers_clean.csv", 
          row.names = FALSE)
```

- Will save file into your working directory!!


## Data "sets" in R

- "set" is in quotation marks because it is not a formal data class

A tidy data "set" can be one of the following types:

- `tibble`
- `data.frame`

We'll often work with `tibble`s:

- `readr` package (e.g. `read_csv` function) loads data as a `tibble` by default
- `tibble`s are part of the tidyverse, so they work well with other packages we are using
- They make minimal assumptions about your data, so are less likely to cause hard to track bugs in your code


## Data frames

A data frame is the most commonly used data structure in R, they are just a list of equal length vectors (usually atomic, but you can use generic as well). 

- Each vector is treated as a column and elements of the vectors as rows.

A `tibble` is a type of data frame that ... makes your life (i.e. data analysis) easier.

- Most often a data frame will be constructed by reading in from a file, but we can also create them from scratch.


##Example: 

How many respondents have below average number of cats?

```{r, warning=FALSE}
mean_cats = cat_lovers2 %>% 
  summarize(mean_cat = mean(number_of_cats))
mean_cats

cat_lovers2 %>% filter(number_of_cats < mean_cats) %>%
  nrow()
```


Do you see any problems here?


```{r}
class(mean_cats)
```


## A possible solution: 

`pull()` works like [[]] or `$` for data frames, and pulls out the value of a single column in a data frame. How does `pull()` work?

```{r}
mean_cats = cat_lovers2 %>% 
  summarize(mean_cat = mean(number_of_cats)) %>%
  pull()
mean_cats

cat_lovers2 %>% filter(number_of_cats < mean_cats) %>%
  nrow()
```

`pull()` can be your new best friend, when used correctly.

```{r,}
class(mean_cats)
```


## Factors

Factor objects are how R stores data for categorical variables (fixed numbers of discrete values). Historically, factors were much easier to work with than character vectors, so many base R functions automatically convert character vectors to factors.

```{r}
x = as.factor(cat_lovers$handedness)
glimpse(x)
class(x)
```


By default, R orders factors in alphabetical order

What if we want to force a particular order?

```{r, fig.height=3.5, fig.width=8, fig.align='center'}
cat_lovers = cat_lovers %>% 
  mutate(handedness = fct_relevel(handedness, 
                                  "left", "ambidextrous", "right"))

ggplot(cat_lovers, aes(x = handedness)) + 
  geom_bar()
```


## Overrriding Data Types

If you are absolutely sure of a data class, overwrite it in your tibble so that you don't need to keep having to keep track of it

```{r}
x <- "2"
typeof(x)
x <- as.numeric(x)
typeof(x)

```


```{r}
class(cat_lovers$handedness)
typeof(cat_lovers$handedness)
```

The `typeof function` is giving information that's at a "lower" level of abstraction. Factor variables (and also Dates) are stored as integers. 

  - Determines the (R internal) type or storage mode of any object
  
- `class`: a simple generic function mechanism which can be used for an object-oriented style of programming. 

So when working with data sets use `str`, `glimpse`, `class`


## Recap

Be careful about data types/classes

  - If your data doesn't behave how you expect it to, implicit coercion might be the reason.
    +  Sometimes `R` makes silly assumptions about your data class 
  - Go in and investigate your data, apply the fix, _save your data_, live happily ever after.
  - Think about your data in context, e.g. 0/1 variable is most likely a `factor`
  - If you are absolutely sure of a data class, overwrite it in your tibble so that you don't need to keep having to keep track of it
  - `mutate` the variable with the correct class
  
--------------------------------------------------------------------------------

# Function Writing


### Why Write your own Functions?

Writing your own functions allow you to automate common tasks in a more powerful and general way than copy-and-pasting. 

Writing a function has three big advantages over using copy-and-paste:

- You can give a function an evocative name that makes your code easier to understand.

- As requirements change, you only need to update code in one place, instead of many.

- You eliminate the chance of making incidental mistakes when you copy and paste (i.e. updating a variable name in one place, but not in another).


### When Should You Write A Function?

You should consider writing a function whenever you’ve copied and pasted a block of code more than twice (i.e. you now have three copies of the same code). 

For example, take a look at this code. What does it do? Notice any mistakes?

```{r}
df <- tibble::tibble(
  a = rnorm(10),
  b = rnorm(10),
  c = rnorm(10),
  d = rnorm(10)
)

df$a <- (df$a - min(df$a, na.rm = TRUE)) / 
  (max(df$a, na.rm = TRUE) - min(df$a, na.rm = TRUE))
df$b <- (df$b - min(df$b, na.rm = TRUE)) / 
  (max(df$b, na.rm = TRUE) - min(df$a, na.rm = TRUE))
df$c <- (df$c - min(df$c, na.rm = TRUE)) / 
  (max(df$c, na.rm = TRUE) - min(df$c, na.rm = TRUE))
df$d <- (df$d - min(df$d, na.rm = TRUE)) / 
  (max(df$d, na.rm = TRUE) - min(df$d, na.rm = TRUE))
```


### How do you Write a Function?

How many inputs do we have?

```{r}
(df$a - min(df$a, na.rm = TRUE)) /
  (max(df$a, na.rm = TRUE) - min(df$a, na.rm = TRUE))
```


Three components of writing a function:

1. You need to pick a **name** for the function

2. You list the **inputs**, or arguments, to the function inside function.

3. You place the code you have developed in **body** of the function, a `{` block that immediately follows `function(...)`.

```{r, eval = FALSE}
function_name <- function(inputs separated by commas){
  #body: put code here
  # what to do with those inputs
}
```

By default they return the last value computed in the function


### Example:

```{r}
add_2 <- function(x){
  x + 2
  1000
}

add_2(2)
```


```{r}
add_2 <- function(x){
  x + 2
}

add_2(2)
```


### Back to Rescale Example

```{r}
rescale01 <- function(x) {
  rng <- range(x, na.rm = TRUE) #We’re computing the range of the data three times, so it makes sense to do it in one step
  (x - rng[1]) / (rng[2] - rng[1])
}

rescale01(df$a)
rescale01(df$b)
```


### Your Turn

Write your own mean function to find the mean of x :

$$\bar{x} = \frac{\sum^n_{i=1}x_i}{n}$$

```{r}
set.seed(4)
x <- round(runif(10, 0, 40),2)
x
```


### Conditional Executuion

An `if` statement allows you to conditionally execute code. It looks like this:

```{r, eval = FALSE}
if (condition) {
  # code executed when condition is TRUE
} else {
  # code executed when condition is FALSE
}
```


Or can use the `ifelse` function:

```{r, eval = FALSE}
ifelse(condition, 
       code executed when condition is TRUE, 
       code executed when condition is FALSE)
```


### Example

```{r}
ifelse_example <- function(x){
  if(x > 0){
    "This value is positive"
  } else if (x == 0){
    "This value is 0"} else{
      "This value is negative"
    }
  }

ifelse_example(3)
ifelse_example(0)
ifelse_example(-2)
```


## Loops

Another tool for reducing duplication is iteration, which helps you when you need to do the same thing to multiple inputs: repeating the same operation on different columns, or on different datasets. 

`for` loops are an example of imperative programming and is a good starting point

- they make iteration very explicit, so it’s obvious what’s happening. 


From Earlier:

```{r, eval = FALSE}
rescale01(df$a)
rescale01(df$b)
rescale01(df$c)
rescale01(df$d)
```

Why we shortened our copying with creating a function, we still have something copy/pasted more than twice.



Loops have three main elements

```{r}
# 1. output
output <- data.frame(matrix(NA, ncol = ncol(df), nrow = nrow(df)))
for (i in seq_along(df)) {            # 2. sequence
  output[,i] <- rescale01(df[[i]])      # 3. body
}

output
```


### Your Turn:

Compute the mean of every column in mtcars.

```{r}
data("mtcars")
head(mtcars)
```


### `purrr` Package:

`for` loops are quite verbose, and require quite a bit of bookkeeping code that is duplicated for every for loop. 

- Functional programming (FP) offers tools to extract out this duplicated code, so each common for loop pattern gets its own function. 

Each function takes a vector as input, applies a function to each piece, and then returns a new vector that’s the same length (and has the same names) as the input. The type of the vector is determined by the suffix to the map function:

- `map()` makes a list.
- `map_lgl()` makes a logical vector.
- `map_int()` makes an integer vector.
- `map_dbl()` makes a double vector.
- `map_chr()` makes a character vector.

Once you master these functions, you’ll find it takes much less time to solve iteration problems. - The important thing is that you solve the problem that you’re working on, not write the most concise and elegant code.


--------------------------------------------------------------------------------

# R Debugging Tips

Like all the other programming language, R sometimes will generate errors or the output may not be the one you want. There are multiple reasons for that. In this course, we don't expect you to write functions so in general, that makes the debugging easier. 

Here is some common type of errors: 

1. "could not find function" errors, usually caused by typos or not loading a required package


2. "Error in if" errors, caused by non-logical data or missing values passed to R's "if" conditional statement

```{r, eval = FALSE}
if(c(1,2,3) > 2) {
  print("True")
}
```

3. "Error in eval" or "object not found" errors, caused by references to objects that don't exist

```{r, eval = FALSE}
abc
```

4. "cannot open" errors, caused by attempts to read a file that doesn't exist or can't be accessed (wrong file path)


5. "no applicable method" errors, caused by using an object-oriented function on a data type it doesn't support

```{r, eval = FALSE}
library(tidyverse)
head(cat_lovers)
cat_lovers %>% summarise(mean(handedness))
```

6. "subscript out of bounds" errors, caused by trying to access an element or dimension that doesn't exist

```{r, eval = FALSE}
cat_lovers %>% summarise(mean(handness)) #mispelling
```

7. package errors caused by being unable to install, compile or load a package.


Here is a few strategies if your code does not work:

1. Google!

Whenever you see an error message, start by googling it. If you’re lucky, you’ll discover that it’s a common error with a known solution. When googling, improve your chances of a good match by removing any variable names or values that are specific to your problem.

2. Make sure the problem does exist.

Sometimes the error may not cause by the current lines you are working on. It is possible that you have changed something earlier. Try to re-run the files from the beginning.

3. Run the functions part by part till you find the problem. 

This is especially useful for the tidyverse functions. 

```{r, eval = FALSE}
cat_lover %>% filter(handedness == "left") %>% 
  ggplot(aes(x = number_of_cats)) + 
  geom_histogram()

glimpse(cat_lover)
```

4. Print out the output to see whether it is the one you want. Sometimes look at the data type may also help you understand what's going on. 

